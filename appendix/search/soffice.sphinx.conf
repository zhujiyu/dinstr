#
# Sphinx configuration file for sOffice project.
#   zhu jiyu
#  2012-3-26
#

# 建立索引
# /usr/local/coreseek/bin/indexer -c appendix/search/soffice.sphinx.conf --all    ##--all表示全部索引
# 启动搜索
# /usr/local/coreseek/bin/searchd -c appendix/search/soffice.sphinx.conf
# 停止后台服务，则使用：searchd -c 配置文件的路径 --stop；
# /usr/local/coreseek/bin/searchd -c appendix/search/soffice.sphinx.conf --stop

#############################################################################
## data source definition
#############################################################################

source s_server_112_125_37_140
{
	type					= mysql
	sql_query_pre			= SET NAMES utf8
	sql_query_pre			= SET SESSION query_cache_type=OFF
    sql_query_info_pre      = SET NAMES utf8      #命令行查询时，设置正确的字符集
}

source s_server_pc
{
	type          = mysql
	sql_query_pre = SET SESSION query_cache_type=OFF
}

source s_mysql : s_server_pc
{
	type			= mysql
	sql_host		= localhost
	sql_user		= jiyu
	sql_pass		= jiyu
	sql_db			= soffice
	sql_port		= 3306	# optional, default is 3306

	# sql_query_pre	= SET NAMES utf8
	# sql_query_pre	= SET SESSION query_cache_type=OFF
}

source s_news : s_mysql
{
    sql_query_pre  = replace into searchs (id, search_index, max_id) \
        select 1 as id, "s_news" as search_index, max(id) as max_id from news
    sql_query            = SELECT n.ID, n.content, UNIX_TIMESTAMP(create_time) AS create_time, user_id, office_id \
        FROM news as n left join wishes as w on n.root = w.ID \
        where n.ID <= (select max_id from searchs where id = 1)
    sql_attr_uint        = user_id           #从SQL读取到的值必须为整数
    sql_attr_uint        = office_id
    sql_attr_timestamp   = create_time #从SQL读取到的值必须为整数，作为时间属性

    sql_query_info       = SELECT * FROM news WHERE id=$id #命令行查询时，从数据库读取原始数据信息
}

source s_office : s_mysql
{
    sql_query_pre  = replace into searchs (id, search_index, max_id) \
        select 2 as id, "s_office" as search_index, max(id) as max_id from offices
    sql_query           = SELECT ID, name, description, announce, UNIX_TIMESTAMP(create_time) AS create_time, member_num, subscriber_num FROM offices \
        where ID <= (select max_id from searchs where id = 2)
    sql_attr_uint       = member_num           #从SQL读取到的值必须为整数
    sql_attr_uint       = subscriber_num
    sql_attr_timestamp  = create_time #从SQL读取到的值必须为整数，作为时间属性

    sql_query_info      = SELECT * FROM offices WHERE id=$id #命令行查询时，从数据库读取原始数据信息
}

source s_wishes : s_mysql
{
    sql_query_pre  = replace into searchs (id, search_index, max_id) \
        select 3 as id, "s_wishes" as search_index, max(id) as max_id from wishes
    sql_query            = SELECT ID, content, UNIX_TIMESTAMP(update_time) AS update_time, office_id, opened, follow_num, approved_num FROM wishes \
        where ID <= (select max_id from searchs where id = 3)
    sql_attr_uint        = opened         #从SQL读取到的值必须为整数
    sql_attr_uint        = office_id
    sql_attr_uint        = follow_num
    sql_attr_uint        = approved_num
    sql_attr_timestamp   = update_time #从SQL读取到的值必须为整数，作为时间属性

    sql_query_info       = SELECT * FROM wishes WHERE id=$id #命令行查询时，从数据库读取原始数据信息
}

source s_news_delta : s_mysql
{
    sql_query            = SELECT n.ID, n.content, UNIX_TIMESTAMP(create_time) AS create_time, user_id, office_id \
        FROM news as n left join wishes as w on n.root = w.ID \
        where n.ID > (select max_id from searchs where id = 1)
    sql_attr_uint        = user_id           #从SQL读取到的值必须为整数
    sql_attr_uint        = office_id
    sql_attr_timestamp   = create_time #从SQL读取到的值必须为整数，作为时间属性

    sql_query_info       = SELECT * FROM news WHERE id=$id #命令行查询时，从数据库读取原始数据信息
}

source s_office_delta : s_mysql
{
    sql_query           = SELECT ID, name, description, announce, UNIX_TIMESTAMP(create_time) AS create_time, member_num, subscriber_num FROM offices \
        where ID > (select max_id from searchs where id = 2)
    sql_attr_uint       = member_num           #从SQL读取到的值必须为整数
    sql_attr_uint       = subscriber_num
    sql_attr_timestamp  = create_time #从SQL读取到的值必须为整数，作为时间属性

    sql_query_info      = SELECT * FROM offices WHERE id=$id #命令行查询时，从数据库读取原始数据信息
}

source s_wishes_delta : s_mysql
{
    sql_query            = SELECT ID, content, UNIX_TIMESTAMP(update_time) AS update_time, office_id, opened, follow_num, approved_num FROM wishes \
        where ID > (select max_id from searchs where id = 3)
    sql_attr_uint        = opened         #从SQL读取到的值必须为整数
    sql_attr_uint        = office_id
    sql_attr_uint        = follow_num
    sql_attr_uint        = approved_num
    sql_attr_timestamp   = update_time #从SQL读取到的值必须为整数，作为时间属性

    sql_query_info       = SELECT * FROM wishes WHERE id=$id #命令行查询时，从数据库读取原始数据信息
}

#############################################################################
## index definition
#############################################################################

index _office
{
	docinfo			= extern
	mlock			= 0
	morphology		= none
	min_stemming_len	= 1
	min_word_len		= 1

    #中文分词配置，详情请查看：http://www.coreseek.cn/products-install/coreseek_mmseg/
    charset_dictpath = /usr/local/mmseg3/etc/         #BSD、Linux环境下设置，/符号结尾
    # charset_dictpath = etc/                         #Windows环境下设置，/符号结尾，最好给出绝对路径，例如：C:/usr/local/coreseek/etc/...
    charset_type        = zh_cn.utf-8
	# 'utf-8' default value is
	# charset_table		= 0..9, A..Z->a..z, _, a..z, U+410..U+42F->U+430..U+44F, U+430..U+44F

	# whether to strip HTML tags from incoming documents
	# known values are 0 (do not strip) and 1 (do strip)
	# optional, default is 0
	html_strip			= 0

	# what HTML attributes to index if stripping HTML
	# optional, default is empty (do not index anything)
	#
	# html_index_attrs		= img=alt,title; a=title;

	# what HTML elements contents to strip
	# optional, default is empty (do not strip element contents)
	#
	# html_remove_elements	= style, script

	# minimum word prefix length to index
	# optional, default is 0 (do not index prefixes)
	#
	# min_prefix_len	= 0

	# list of fields to limit prefix indexing to
	# optional, default value is empty (index all fields in prefix mode)
	#
	# prefix_fields		= filename

	# enable star-syntax (wildcards) when searching prefix/infix indexes
	# known values are 0 and 1
	# optional, default is 0 (do not use wildcard syntax)
	#
	# enable_star		= 1

	# enable star-syntax (wildcards) when searching prefix/infix indexes
	# known values are 0 and 1
	# optional, default is 0 (do not use wildcard syntax)
	#
	# enable_star		= 1

	# whether to keep dictionary (.spi) on disk, or cache it in RAM
	# optional, default is 0 (cache in RAM), searchd-only
	#
	# ondisk_dict				= 1

	# whether to enable in-place inversion (2x less disk, 90-95% speed)
	# optional, default is 0 (use separate temporary files), indexer-only
	#
	# inplace_enable			= 1

	source			= s_office
	path			= /usr/local/coreseek/var/data/office
}

index _news : _office
{
	source			= s_news
	path			= /usr/local/coreseek/var/data/news
}

index _wishes : _office
{
	source			= s_wishes
	path			= /usr/local/coreseek/var/data/wishes
}

index _news_delta : _office
{
	source			= s_news_delta
	path			= /usr/local/coreseek/var/data/news.delta
}

index _office_delta : _office
{
	source			= s_office_delta
	path			= /usr/local/coreseek/var/data/office.delta
}

index _wishes_delta : _office
{
	source			= s_wishes_delta
	path			= /usr/local/coreseek/var/data/wishes.delta
}

#############################################################################
## indexer settings
#############################################################################

indexer
{
	# memory limit, in bytes, kiloytes (16384K) or megabytes (256M)
	# optional, default is 32M, max is 2047M, recommended is 256M to 1024M
	mem_limit			= 128M

	# maximum IO calls per second (for I/O throttling)
	# optional, default is 0 (unlimited)
	#
	max_iops			= 40


	# maximum IO call size, bytes (for I/O throttling)
	# optional, default is 0 (unlimited)
	#
	# max_iosize		= 1048576


	# maximum xmlpipe2 field length, bytes
	# optional, default is 2M
	#
	# max_xmlpipe2_field	= 4M


	# write buffer size, bytes
	# several (currently up to 4) buffers will be allocated
	# write buffers are allocated in addition to mem_limit
	# optional, default is 1M
	#
	# write_buffer		= 1M
}

#############################################################################
## searchd settings
#############################################################################

searchd
{
	# hostname, port, or hostname:port, or /unix/socket/path to listen on
	# multi-value, multiple listen points are allowed
	# optional, default is 0.0.0.0:9312 (listen on all interfaces, port 9312)
	#
	# listen				= 127.0.0.1
	# listen				= 192.168.0.1:9312
	listen				= 9312
	# listen				= /var/run/searchd.sock


	# log file, searchd run info is logged here
	# optional, default is 'searchd.log'
	log					= /usr/local/coreseek/var/log/searchd.log

	# query log file, all search queries are logged here
	# optional, default is empty (do not log queries)
	query_log			= /usr/local/coreseek/var/log/query.log

	# client read timeout, seconds
	# optional, default is 5
	read_timeout		= 5

	# request timeout, seconds
	# optional, default is 5 minutes
	client_timeout		= 300

	# maximum amount of children to fork (concurrent searches to run)
	# optional, default is 0 (unlimited)
	max_children		= 30

	# PID file, searchd process ID file name
	# mandatory
	pid_file			= /usr/local/coreseek/var/log/searchd.pid

	# max amount of matches the daemon ever keeps in RAM, per-index
	# WARNING, THERE'S ALSO PER-QUERY LIMIT, SEE SetLimits() API CALL
	# default is 1000 (just like Google)
	max_matches			= 1000

	# seamless rotate, prevents rotate stalls if precaching huge datasets
	# optional, default is 1
	seamless_rotate		= 1

	# whether to forcibly preopen all indexes on startup
	# optional, default is 0 (do not preopen)
	preopen_indexes		= 0

	# whether to unlink .old index copies on succesful rotation.
	# optional, default is 1 (do unlink)
	unlink_old			= 1

	# attribute updates periodic flush timeout, seconds
	# updates will be automatically dumped to disk this frequently
	# optional, default is 0 (disable periodic flush)
	#
	# attr_flush_period	= 900


	# instance-wide ondisk_dict defaults (per-index value take precedence)
	# optional, default is 0 (precache all dictionaries in RAM)
	#
	# ondisk_dict_default	= 1


	# MVA updates pool size
	# shared between all instances of searchd, disables attr flushes!
	# optional, default size is 1M
	mva_updates_pool	= 1M

	# max allowed network packet size
	# limits both query packets from clients, and responses from agents
	# optional, default size is 8M
	max_packet_size		= 8M

	# crash log path
	# searchd will (try to) log crashed query to 'crash_log_path.PID' file
	# optional, default is empty (do not create crash logs)
	#
	crash_log_path		= /usr/local/coreseek/var/log/crash


	# max allowed per-query filter count
	# optional, default is 256
	max_filters			= 256

	# max allowed per-filter values count
	# optional, default is 4096
	max_filter_values	= 4096


	# socket listen queue length
	# optional, default is 5
	#
	# listen_backlog		= 5


	# per-keyword read buffer size
	# optional, default is 256K
	#
	# read_buffer			= 256K


	# unhinted read size (currently used when reading hits)
	# optional, default is 32K
	#
	# read_unhinted		= 32K
}

# --eof--
